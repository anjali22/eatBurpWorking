Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec,
    _class,
    _jsxFileName = '/home/anjali/growler-prowler-master/screens/RestaurantMapScreen.js';

var _reactNative = require('react-native');

var _reactRedux = require('react-redux');

var _expo = require('expo');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  RestaurantMapScreen: {
    displayName: 'RestaurantMapScreen'
  }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/home/anjali/growler-prowler-master/screens/RestaurantMapScreen.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
  };
}

var RestaurantMapScreen = _wrapComponent('RestaurantMapScreen')((_dec = (0, _reactRedux.connect)(function (data) {
  return RestaurantMapScreen.getDataProps(data);
}), _dec(_class = function (_React$Component) {
  _inherits(RestaurantMapScreen, _React$Component);

  function RestaurantMapScreen() {
    _classCallCheck(this, RestaurantMapScreen);

    return _possibleConstructorReturn(this, (RestaurantMapScreen.__proto__ || Object.getPrototypeOf(RestaurantMapScreen)).apply(this, arguments));
  }

  _createClass(RestaurantMapScreen, [{
    key: 'render',
    value: function render() {
      var restaurants = this.props.restaurants;


      return _react3.default.createElement(
        _reactNative.View,
        { style: { flex: 1 }, __source: {
            fileName: _jsxFileName,
            lineNumber: 19
          }
        },
        _react3.default.createElement(
          _expo.MapView,
          {
            style: styles.map,
            loadingBackgroundColor: '#f9f5ed',
            showsUserLocation: true,
            initialRegion: {
              latitude: 49.28827,
              longitude: -123.0977,
              latitudeDelta: 0.1,
              longitudeDelta: 0.1
            }, __source: {
              fileName: _jsxFileName,
              lineNumber: 20
            }
          },
          this.props.restaurants.map(function (restaurant) {
            var latitude = restaurant.latitude,
                longitude = restaurant.longitude,
                name = restaurant.name,
                isOpen = restaurant.isOpen;


            return _react3.default.createElement(_expo.MapView.Marker, {
              key: name,
              pinColor: isOpen ? 'green' : 'red',
              coordinate: { latitude: latitude, longitude: longitude },
              title: name,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 34
              }
            });
          })
        )
      );
    }
  }], [{
    key: 'getDataProps',
    value: function getDataProps(data) {
      return {
        restaurants: data.restaurants.all
      };
    }
  }]);

  return RestaurantMapScreen;
}(_react3.default.Component)) || _class));

exports.default = RestaurantMapScreen;


var styles = _reactNative.StyleSheet.create({
  map: {
    flex: 1
  }
});