Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require('react-native');

var _expo = require('expo');

var _geolib = require('geolib');

var _geolib2 = _interopRequireDefault(_geolib);

var _Actions = require('../state/Actions');

var _Actions2 = _interopRequireDefault(_Actions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var regeneratorRuntime = require('regenerator-runtime');

exports.default = function computeDistancesAsync(_ref) {
  var dispatch = _ref.dispatch,
      getState = _ref.getState;

  var _getState, restaurants, _ref2, status, _ref3, coords, restaurantsWithDistances, nearbyRestaurants;

  return regeneratorRuntime.async(function computeDistancesAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _getState = getState(), restaurants = _getState.restaurants;
          _context.next = 3;
          return regeneratorRuntime.awrap(_expo.Permissions.askAsync(_expo.Permissions.LOCATION));

        case 3:
          _ref2 = _context.sent;
          status = _ref2.status;

          if (!(status !== 'granted')) {
            _context.next = 7;
            break;
          }

          return _context.abrupt('return');

        case 7:
          _context.next = 9;
          return regeneratorRuntime.awrap(_expo.Location.getCurrentPositionAsync({
            enableHighAccuracy: _reactNative.Platform.OS === 'ios'
          }));

        case 9:
          _ref3 = _context.sent;
          coords = _ref3.coords;
          restaurantsWithDistances = restaurants.all.map(function (restaurant) {
            var distanceM = _geolib2.default.getDistance({ latitude: coords.latitude, longitude: coords.longitude }, { latitude: restaurant.latitude, longitude: restaurant.longitude });

            var distanceKm = (distanceM / 1000.0).toFixed(2);
            var formattedDistance = distanceKm + 'km';

            var direction = _geolib2.default.getCompassDirection({ latitude: coords.latitude, longitude: coords.longitude }, { latitude: restaurant.latitude, longitude: restaurant.longitude });

            return restaurant.set('distance', formattedDistance).set('direction', direction);
          });
          nearbyRestaurants = restaurantsWithDistances.sortBy(function (restaurant) {
            return restaurant.distance;
          }).map(function (restaurant) {
            return restaurant.id;
          });


          dispatch(_Actions2.default.setRestaurants(restaurantsWithDistances));
          dispatch(_Actions2.default.setNearbyRestaurants(nearbyRestaurants));

        case 15:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};